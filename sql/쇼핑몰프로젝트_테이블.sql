-- 쇼핑몰 프로젝트 관련 테이블 --
-- 테이블 : 회원정보, 상품카테고리, 상품정보, 상품이미지정보테이블, 장바구니, 구매정보

상품정보 : 상품명, 이미지명
청바지.     a.jpg   b.jpg   c.jpg

DROP TABLE SHOP_MEMBER;

-- 회원정보 테이블
CREATE TABLE SHOP_MEMBER (
    MEM_ID VARCHAR2(100) CONSTRAINT PK_SHOP_MEMBER PRIMARY KEY
    , MEM_PW VARCHAR2(100) NOT NULL
    , MEM_NAME VARCHAR2(100) NOT NULL
    , MEM_TELL VARCHAR2(100) NOT NULL -- 010-1111-2222
    , MEM_EMAIL VARCHAR2(200)
    , MEM_ADDR VARCHAR2(300)
    , IS_ADMIN VARCHAR2(6) DEFAULT 'N' -- Y or N
    , JOIN_DATE DATE DEFAULT SYSDATE
);
COMMENT ON TABLE SHOP_MEMBER IS '쇼핑몰 회원정보 테이블';
COMMENT ON COLUMN SHOP_MEMBER.MEM_ID IS '회원ID';
COMMENT ON COLUMN SHOP_MEMBER.MEM_PW IS '회원PW';
INSERT INTO SHOP_MEMBER(
    MEM_ID
    , MEM_PW
    , MEM_NAME
    , MEM_TELL
    , MEM_EMAIL
    , MEM_ADDR
    ) VALUES (
    '멤아이디'
    , '멤피더블유'
    , '멤네임'
    , '멤텔'
    , '멤이메일'
    , '멤어드레스'
);
SELECT * FROM SHOP_MEMBER;
update shop_member
set
is_admin = 'Y'
where mem_id = 'admin';
SELECT MEM_ID
			, MEM_NAME
			, IS_ADMIN
		FROM SHOP_MEMBER
		WHERE MEM_ID = 'ID1'
		AND MEM_PW = '1111';
-- 상품 카테고리
CREATE TABLE ITEM_CATEGORY (
    --CATE_001
    CATE_CODE VARCHAR2(50) CONSTRAINT PK_ITEM_CATEGORY PRIMARY KEY
    , CATE_NAME VARCHAR2(100) NOT NULL
);
SELECT * FROM ITEM_CATEGORY;
INSERT INTO ITEM_CATEGORY VALUES('CATE_001', 'IT/인터넷');
INSERT INTO ITEM_CATEGORY VALUES('CATE_002', '사회/과학');
INSERT INTO ITEM_CATEGORY VALUES('CATE_003', '경제/경영');

-- 메뉴 테이블
CREATE TABLE ADMIN_MENU (
    MENU_CODE VARCHAR2(50) PRIMARY KEY
    , MENU_NAME VARCHAR2(100) NOT NULL UNIQUE
    , MENU_URI VARCHAR2(100) NOT NULL UNIQUE
);
INSERT INTO ADMIN_MENU VALUES ('MENU_001', '상품관리', 'categoryManage');
INSERT INTO ADMIN_MENU VALUES('MENU_002', '회원관리', 'memberList');
SELECT * FROM ADMIN_MENU;


-- 서브메뉴 테이블
drop table SUB_MENU;
DROP TABLE ADMIN_MENU;
CREATE TABLE SUB_MENU (
    SUB_MENU_CODE VARCHAR2(50) PRIMARY KEY
    , SUB_MENU_NAME VARCHAR2(100) NOT NULL UNIQUE
    , MENU_CODE VARCHAR2(50) REFERENCES ADMIN_MENU (MENU_CODE)
    ON DELETE CASCADE
    , MENU_URI VARCHAR2(100) NOT NULL UNIQUE
);
INSERT INTO SUB_MENU VALUES ('SUB_MENU_001', '카테고리관리', 'MENU_001', 'categoryManage');
INSERT INTO SUB_MENU VALUES ('SUB_MENU_002', '상품등록', 'MENU_001', 'regItem');
INSERT INTO SUB_MENU VALUES ('SUB_MENU_003', '상품관리', 'MENU_001', 'itemManage');
INSERT INTO SUB_MENU VALUES ('SUB_MENU_004', '회원목록', 'MENU_002', 'memberList');
INSERT INTO SUB_MENU VALUES ('SUB_MENU_005', '구매목록관리', 'MENU_001', 'buyList');
SELECT * FROM SUB_MENU;



-- 상품정보테이블
SELECT * FROM SHOP_ITEM;
DROP TABLE SHOP_ITEM;
CREATE TABLE SHOP_ITEM (
    --ITEM_001
    ITEM_CODE VARCHAR2(100) CONSTRAINT PK_SHOP_ITEM PRIMARY KEY
    , ITEM_NAME VARCHAR2(100) NOT NULL UNIQUE
    , ITEM_PRICE NUMBER NOT NULL
    , ITEM_DETAIL VARCHAR2(1000)
    , ITEM_STOCK NUMBER DEFAULT 10
    , CATE_CODE VARCHAR2(50) REFERENCES ITEM_CATEGORY(CATE_CODE)
        ON DELETE CASCADE
);
delete ITEM_IMAGE;
DELETE SHOP_ITEM;

--다음 상품코드 조회하는 sql
SELECT 'ITEM_'||
        LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6, 3))), 0) + 1, 3, 0)
FROM SHOP_ITEM;

SELECT LPAD(NVL(MAX(TO_NUMBER(SUBSTR(ITEM_CODE, 6))), 0) + 1, 3, '0')
FROM SHOP_ITEM;

-- 상품 이미지 정보 테이블
SELECT * FROM ITEM_IMAGE;

-- 상품명, 가격, 첨부된 파일명
SELECT ITEM.ITEM_CODE
    , ITEM_NAME
    , ITEM_PRICE
    , CATE_CODE
    , ATTACHED_IMG_NAME
FROM SHOP_ITEM ITEM, ITEM_IMAGE IMG
WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
AND IS_MAIN = 'Y';

drop table ITEM_IMAGE;
CREATE TABLE ITEM_IMAGE (
    IMG_CODE NUMBER PRIMARY KEY -- 1, 2, 3
    , ORIGIN_IMG_NAME VARCHAR2(200) -- 원본파일명
    , ATTACHED_IMG_NAME VARCHAR2(200) -- 첨부된 파일명
    , IS_MAIN VARCHAR2(10) -- 대표 이미지 여부 'Y' or 'N'
    , ITEM_CODE VARCHAR2(100) REFERENCES  SHOP_ITEM(ITEM_CODE)
    ON DELETE CASCADE
);
SELECT NVL(MAX(IMG_CODE), 0) + 1
		FROM ITEM_IMAGE;
        
SELECT ITEM.ITEM_CODE
    , ITEM_NAME
    , ITEM_PRICE
    , ITEM_DETAIL
    , ATTACHED_IMG_NAME
    , IS_MAIN
FROM SHOP_ITEM ITEM, ITEM_IMAGE IMG
WHERE ITEM.ITEM_CODE = IMG.ITEM_CODE
AND ITEM.ITEM_CODE = 'ITEM_001';

-- 장바구니 테이블
CREATE TABLE SHOP_CART(
    CART_NUM NUMBER PRIMARY KEY -- 1, 2, 3
    , ITEM_CODE VARCHAR2(100) REFERENCES SHOP_ITEM(ITEM_CODE) NOT NULL
    , MEM_ID VARCHAR2(100) REFERENCES SHOP_MEMBER(MEM_ID) NOT NULL
    , ITEM_CNT NUMBER NOT NULL
    , CREATE_DATE DATE DEFAULT SYSDATE
);
SELECT CART_NUM
    , ITEM_CODE
    , MEM_ID
    , ITEM_CNT
    , CREATE_DATE
FROM SHOP_CART;
INSERT INTO SHOP_CART(
    CART_NUM
    , ITEM_CODE
    , MEM_ID
    , ITEM_CNT
) VALUES (
    (SELECT NVL(MAX(CART_NUM), 0) + 1
    FROM SHOP_CART)
    , 'ITEM_001'
    , 'admin'
    , 3
);
SELECT *
FROM SHOP_CART;
delete 
FROM SHOP_CART
WHERE CART_NUM = 1;
-- 상품이미지명, 상품명, 가격, 수량, 총가격
SELECT IMAGE.ATTACHED_IMG_NAME
    , ITEM.ITEM_NAME
    , ITEM.ITEM_PRICE
    , CART.ITEM_CNT
    , ITEM.ITEM_PRICE * CART.ITEM_CNT AS TOTAL_PRICE
FROM SHOP_ITEM ITEM, SHOP_CART CART, ITEM_IMAGE IMAGE
WHERE ITEM.ITEM_CODE = CART.ITEM_CODE
AND CART.ITEM_CODE = IMAGE.ITEM_CODE
AND CART.MEM_ID = 'admin'
AND IMAGE.IS_MAIN = 'Y';

SELECT 
    (SELECT ITEM_NAME 
    FROM SHOP_ITEM 
    WHERE ITEM_CODE = SHOP_CART.ITEM_CODE) AS ITEM_NAME
    , (SELECT ITEM_PRICE
        FROM SHOP_ITEM
        WHERE ITEM_CODE = SHOP_CART.ITEM_CODE) AS ITEM_PRICE
    , ITEM_CNT
    , (SELECT ITEM_PRICE
        FROM SHOP_ITEM
        WHERE ITEM_CODE = SHOP_CART.ITEM_CODE) * ITEM_CNT AS TOTAL_PRICE
    , (SELECT ATTACHED_IMG_NAME
        FROM ITEM_IMAGE
        WHERE ITEM_CODE = SHOP_CART.ITEM_CODE
        AND IS_MAIN = 'Y') AS ATTACHED_IMG_NAME
FROM SHOP_CART;

-- 장바구니코드, 상품코드, 상품명, 가격, 상품대표이미지
-- 총 가격, 장바구니 회원 ID, 장바구니에 들어간 개수
-- DROP VIEW CART_VIEW;
CREATE OR REPLACE VIEW CART_VIEW
AS
SELECT CART.CART_NUM 
    , CART.ITEM_CODE
    , ITEM.ITEM_NAME
    , ITEM.ITEM_PRICE
    , IMG.ATTACHED_IMG_NAME
    , CART.ITEM_CNT
    , ITEM.ITEM_PRICE * CART.ITEM_CNT AS TOTAL_PRICE
    , CART.MEM_ID
    , TO_CHAR(CREATE_DATE, 'YYYY-MM-DD') AS CREATE_DATE
FROM SHOP_CART CART, SHOP_ITEM ITEM, ITEM_IMAGE IMG
WHERE CART.ITEM_CODE = ITEM.ITEM_CODE
AND CART.ITEM_CODE = IMG.ITEM_CODE
AND IMG.IS_MAIN = 'Y';

SELECT * FROM CART_VIEW;

DELETE SHOP_CART
WHERE ITEM_CODE IN ()
AND MEM_ID = 'admin';

-- 구매정보테이블
CREATE TABLE SHOP_BUY (
    BUY_NUM NUMBER PRIMARY KEY
    , MEM_ID VARCHAR2(100) REFERENCES SHOP_MEMBER(MEM_ID)
    , ITEM_CODE VARCHAR2(100) REFERENCES SHOP_ITEM (ITEM_CODE)
    , ITEM_CNT NUMBER
    , BUY_PRICE NUMBER
    , BUY_DATE DATE DEFAULT SYSDATE
    , ORDER_NUM VARCHAR2(100) -- 주문날짜_주문자ID 202203311501_admin
);
SELECT SUM(ITEM_PRICE)
FROM CART_VIEW
WHERE MEM_ID = 'admin';

select * from shop_buy;

--서브쿼리
SELECT DISTINCT ORDER_NUM
    , MEM_ID
    , (SELECT MEM_NAME 
        FROM SHOP_MEMBER 
        WHERE MEM_ID = SHOP_BUY.MEM_ID) AS MEM_NAME
    , TO_CHAR(BUY_DATE, 'YYYY-MM-DD HH24:MI') AS BUY_DATE
FROM SHOP_BUY;

--안시조인
SELECT DISTINCT ORDER_NUM
    , B.MEM_ID
    , MEM_NAME
    , TO_CHAR(BUY_DATE, 'YYYY-MM-DD HH24:MI') AS BUY_DATE
FROM SHOP_BUY B INNER JOIN SHOP_MEMBER M
ON B.MEM_ID = M.MEM_ID;
SELECT * FROM SHOP_BUY;

SELECT IMG.ATTACHED_IMG_NAME
    , ITEM.ITEM_NAME
    , BUY.ITEM_CNT
    , BUY.BUY_PRICE
    , BUY.MEM_ID
    , MEMBER.MEM_NAME
FROM SHOP_BUY BUY, SHOP_ITEM ITEM, ITEM_IMAGE IMG, SHOP_MEMBER MEMBER
WHERE BUY.ITEM_CODE = ITEM.ITEM_CODE
AND BUY.ITEM_CODE = IMG.ITEM_CODE
AND BUY.MEM_ID = MEMBER.MEM_ID
AND  IS_MAIN = 'Y';

SELECT DISTINCT ORDER_NUM
    , MEM_ID
    , (SELECT MEM_NAME
        FROM SHOP_MEMBER
        WHERE MEM_ID = SHOP_BUY.MEM_ID) AS MEM_NAME
    , TO_CHAR(BUY_DATE, 'YYYY-MM-DD HH24:MI') AS BUY_DATE
FROM SHOP_BUY
WHERE 1 = 1 
AND UPPER(ORDER_NUM) LIKE UPPER('%2022%')
AND (UPPER(MEM_ID) LIKE UPPER('%D%') 
        OR 
    UPPER((SELECT MEM_NAME
        FROM SHOP_MEMBER
        WHERE MEM_ID = SHOP_BUY.MEM_ID)) LIKE UPPER('%ADMIN%'))
AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') >= '2000-01-01'  AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') < '2022-12-31'
ORDER BY BUY_DATE DESC;

SELECT * 
FROM EMP 
WHERE HIREDATE > '20070301';

SELECT * 
FROM EMP 
WHERE TO_CHAR(HIREDATE, 'YYYYMMDD') > '20070301';

SELECT *
FROM EMP
WHERE HIREDATE > TO_DATE('20070301');

SELECT EMPNO
    , ENAME
    , HIREDATE
FROM EMP
ORDER BY HIREDATE DESC;


SELECT ROW_NUM
    ,EMPNO
    , ENAME
    , MYDATE
FROM(
    SELECT ROWNUM AS ROW_NUM
        ,EMPNO
        , ENAME
        , MYDATE
    FROM (
        SELECT EMPNO
            , ENAME
            , HIREDATE AS MYDATE
        FROM EMP
        WHERE DEPTNO = 30
        ORDER BY HIREDATE DESC
    )
)
WHERE ROW_NUM >= 4 AND ROW_NUM <= 6;

select * from shop_buy;
SELECT ORDER_NUM
    , MEM_ID
    , MEM_NAME
    , BUY_DATE
    , ROW_NUM
FROM
(
    SELECT ORDER_NUM
        , MEM_ID
        , MEM_NAME
        , BUY_DATE
        , ROWNUM AS ROW_NUM
    FROM
    (
        SELECT DISTINCT ORDER_NUM
            , MEM_ID
            , (SELECT MEM_NAME
                FROM SHOP_MEMBER
                WHERE MEM_ID = SHOP_BUY.MEM_ID) AS MEM_NAME
            , TO_CHAR(BUY_DATE, 'YYYY-MM-DD HH24:MI') AS BUY_DATE
        FROM SHOP_BUY
        WHERE 1 = 1
        <if test="searchOrderNum != null and !searchOrderNum.equals('')">
        AND UPPER(ORDER_NUM) LIKE UPPER('%'||#{searchOrderNum}||'%')
        </if>   
        <if test="searchBuyer != null and !searchBuyer.equals('')">
        AND (UPPER(MEM_ID) LIKE UPPER('%'||#{searchBuyer}||'%') 
                OR 
            UPPER((SELECT MEM_NAME
                FROM SHOP_MEMBER               
                WHERE MEM_ID = SHOP_BUY.MEM_ID)) LIKE UPPER('%'||#{searchBuyer}||'%'))
        </if>     
        AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &gt;= #{searchFromDate} AND TO_CHAR(BUY_DATE, 'YYYY-MM-DD') &lt;= #{searchToDate}
        ORDER BY BUY_DATE DESC
    )
);

select * from shop_member;